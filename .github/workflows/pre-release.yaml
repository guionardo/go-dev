name: Pre-release

on:
  pull_request:
    types: [opened]

jobs:
  merged_release_version:
    name: "If not merged and has a release version"
    if: github.event.pull_request.merged == false
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.check_version.outputs.version}}
    steps:
    - id: check_version
      run: |
          if [[ ! $GITHUB_HEAD_REF =~ release\/v([0-9]{1,3}.[0-9]{1,3}.[0-9]{1,3}) ]]; then
            exit 1          
          fi
          v=${BASH_REMATCH[1]}
          echo "::notice file=pkg/consts/metadata.json::Current release ${v}"
          echo "version=${v}" >> $GITHUB_OUTPUT

  get_latest_release:
    name: "Get latest release"
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.check_version.outputs.version }}
    steps:
    - uses: actions/checkout@v3
    - id: check_version
      run: |
        v=$(jq .version pkg/consts/metadata.json)
        echo "::notice file=pkg/consts/metadata.json::Latest release ${v}"
        echo "version=$v" >> $GITHUB_OUTPUT



  validate:
    name: "Validate"
    needs: ["merged_release_version","get_latest_release"]
    runs-on: ubuntu-latest
    outputs:
      is_valid: ${{ steps.validate.outputs.is_valid }}
    steps:
      - uses: actions/checkout@v3
      - id: validate
        run: |
          VERSION=${{needs.merged_release_version.outputs.version}}
          echo "::notice::Latest release ${VERSION}"          
          CURRENT_VERSION=${{needs.get_latest_release.outputs.version}}
          echo "::notice::Current release ${CURRENT_VERSION}"

          if [ "$VERSION" == "$CURRENT_VERSION" ]; then
            echo "::warning::No change"
            exit 1
          fi

          regex="([0-9]+).([0-9]+).([0-9]+)"
          if [[ ${VERSION} =~ $regex ]]; then
              l_major="${BASH_REMATCH[1]}"
              l_minor="${BASH_REMATCH[2]}"
              l_build="${BASH_REMATCH[3]}"
          else
            echo "::error::Invalid latest release ${VERSION}"
            exit 1
          fi
          
          if [[ ${CURRENT_VERSION} =~ $regex ]]; then
              c_major="${BASH_REMATCH[1]}"
              c_minor="${BASH_REMATCH[2]}"
              c_build="${BASH_REMATCH[3]}"
          else
            echo "::error::Invalid current release ${CURRENT_VERSION}"
            exit 1
          fi

          if [ "$l_major" -lt "$c_major" ]; then
            echo "::warning::Major version is smaller than current"
            exit 1
          fi

          if [ "$l_minor" -lt "$c_minor" ]; then
            echo "::warning::Minor version is smaller than current"
            exit 1
          fi

          if [ "$l_build" -lt "$c_build" ]; then
            echo "::warning::Build version is smaller than current"
            exit 1
          fi

          echo "is_valid=1" >> $GITHUB_OUTPUT

  update_metadata:
    needs: [validate,merged_release_version]
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - name: "Update metadata.json"
      run: |
        VERSION=${{needs.merged_release_version.outputs.version}}
        BUILD_TIME=$(date +"%Y-%m-%dT%H:%M:%S%:z")
        BUILD_RUNNER="github"
        tmp=$(jq --arg a "$BUILD_TIME"  --arg b "$RELEASE" --arg c "$BUILD_RUNNER" '.build_time = $a | .version = $b | .build_runner = $c' ./pkg/consts/metadata.json)
        echo $tmp
    
            
  close_pr:
    needs: [validate]
    if: always()
    name: Close pull request
    runs-on: ubuntu-latest
    steps:
    - run: |
        if [ "${{needs.validate.outputs.is_valid}}" == "1" ]; then
          exit
        fi
        echo "::warning::This pull request should not be merged!"
    # - uses: superbrothers/close-pull-request@v3
    #   with:
    #     comment: "Invalid version"









 